[
    {
        "label": "dash",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash",
        "description": "dash",
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "dcc",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "html",
        "importPath": "dash",
        "description": "dash",
        "isExtraImport": true,
        "detail": "dash",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "plotly.graph_objects",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.graph_objects",
        "description": "plotly.graph_objects",
        "detail": "plotly.graph_objects",
        "documentation": {}
    },
    {
        "label": "n_colors",
        "importPath": "plotly.colors",
        "description": "plotly.colors",
        "isExtraImport": true,
        "detail": "plotly.colors",
        "documentation": {}
    },
    {
        "label": "n_colors",
        "importPath": "plotly.colors",
        "description": "plotly.colors",
        "isExtraImport": true,
        "detail": "plotly.colors",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio",
        "importPath": "app.dataset.data",
        "description": "app.dataset.data",
        "isExtraImport": true,
        "detail": "app.dataset.data",
        "documentation": {}
    },
    {
        "label": "dash_bootstrap_components",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_bootstrap_components",
        "description": "dash_bootstrap_components",
        "detail": "dash_bootstrap_components",
        "documentation": {}
    },
    {
        "label": "dash_leaflet",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dash_leaflet",
        "description": "dash_leaflet",
        "detail": "dash_leaflet",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "dotenv_values",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DECIMAL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DECIMAL",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "func",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "config_db.configs.base",
        "description": "config_db.configs.base",
        "isExtraImport": true,
        "detail": "config_db.configs.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "config_db.configs.base",
        "description": "config_db.configs.base",
        "isExtraImport": true,
        "detail": "config_db.configs.base",
        "documentation": {}
    },
    {
        "label": "Geometry",
        "importPath": "geoalchemy2",
        "description": "geoalchemy2",
        "isExtraImport": true,
        "detail": "geoalchemy2",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "config_db.configs.connection",
        "description": "config_db.configs.connection",
        "isExtraImport": true,
        "detail": "config_db.configs.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "config_db.configs.connection",
        "description": "config_db.configs.connection",
        "isExtraImport": true,
        "detail": "config_db.configs.connection",
        "documentation": {}
    },
    {
        "label": "DecrementoMunicipio",
        "importPath": "config_db.entities.decremento_municipio",
        "description": "config_db.entities.decremento_municipio",
        "isExtraImport": true,
        "detail": "config_db.entities.decremento_municipio",
        "documentation": {}
    },
    {
        "label": "MonitoramentoDissolve",
        "importPath": "config_db.entities.monitoramento_dissolve",
        "description": "config_db.entities.monitoramento_dissolve",
        "isExtraImport": true,
        "detail": "config_db.entities.monitoramento_dissolve",
        "documentation": {}
    },
    {
        "label": "NoResultFound",
        "importPath": "sqlalchemy.orm.exc",
        "description": "sqlalchemy.orm.exc",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm.exc",
        "documentation": {}
    },
    {
        "label": "geopandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "geopandas",
        "description": "geopandas",
        "detail": "geopandas",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "config_db.repository.decremento_municipio_repository",
        "description": "config_db.repository.decremento_municipio_repository",
        "isExtraImport": true,
        "detail": "config_db.repository.decremento_municipio_repository",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "config_db.repository.monitoramento_dissolve_repository",
        "description": "config_db.repository.monitoramento_dissolve_repository",
        "isExtraImport": true,
        "detail": "config_db.repository.monitoramento_dissolve_repository",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "footer",
        "importPath": "components",
        "description": "components",
        "isExtraImport": true,
        "detail": "components",
        "documentation": {}
    },
    {
        "label": "graph",
        "importPath": "components",
        "description": "components",
        "isExtraImport": true,
        "detail": "components",
        "documentation": {}
    },
    {
        "label": "header",
        "importPath": "components",
        "description": "components",
        "isExtraImport": true,
        "detail": "components",
        "documentation": {}
    },
    {
        "label": "map_",
        "importPath": "components",
        "description": "components",
        "isExtraImport": true,
        "detail": "components",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "app",
        "description": "app",
        "isExtraImport": true,
        "detail": "app",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "footer",
        "kind": 5,
        "importPath": "app.components.footer",
        "description": "app.components.footer",
        "peekOfCode": "footer = html.Footer([],\n    className=\"bg-primary\",\n    style={\"height\": \"3vh\"}\n)",
        "detail": "app.components.footer",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio.index",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "df_decremento_municipio.index = pd.to_datetime(df_decremento_municipio.index)\ndf_decremento_municipio = (\n    df_decremento_municipio[[\"area_ha\"]].groupby(df_decremento_municipio.index).sum()\n)\nlista_ano = df_decremento_municipio.index.year.unique()[\n    df_decremento_municipio.index.year.unique() > 2017\n]\ndf_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "df_decremento_municipio = (\n    df_decremento_municipio[[\"area_ha\"]].groupby(df_decremento_municipio.index).sum()\n)\nlista_ano = df_decremento_municipio.index.year.unique()[\n    df_decremento_municipio.index.year.unique() > 2017\n]\ndf_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]\n    df[\"timedelta\"] = (",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "lista_ano",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "lista_ano = df_decremento_municipio.index.year.unique()[\n    df_decremento_municipio.index.year.unique() > 2017\n]\ndf_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]\n    df[\"timedelta\"] = (\n        df.index - (df.index.year.astype(\"str\") + \"-01-01\").astype(\"datetime64[ns]\")\n    ) / 1000000\n    df[\"cumsum\"] = df.loc[:, \"area_ha\"].cumsum()",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "df_empty",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "df_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]\n    df[\"timedelta\"] = (\n        df.index - (df.index.year.astype(\"str\") + \"-01-01\").astype(\"datetime64[ns]\")\n    ) / 1000000\n    df[\"cumsum\"] = df.loc[:, \"area_ha\"].cumsum()\n    df_empty = pd.concat([df_empty, df[[\"timedelta\", \"cumsum\"]]])\n# Construindo os graficos dos anos passados da série histórica\ngrafico_acumulado_tempo = go.Figure()",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "grafico_acumulado_tempo",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "grafico_acumulado_tempo = go.Figure()\ngreys_custom = n_colors(\n    \"rgb(220, 220, 220)\", \"rgb(160, 160, 160)\", len(lista_ano) + 1, colortype=\"rgb\"\n)\nfor year, color in zip(lista_ano[:-1], greys_custom):\n    x_ = df_empty.loc[df_empty.index.year == year, \"timedelta\"]\n    y_ = df_empty.loc[df_empty.index.year == year, \"cumsum\"]\n    data = go.Scatter(\n        x=x_,\n        y=y_,",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "greys_custom",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "greys_custom = n_colors(\n    \"rgb(220, 220, 220)\", \"rgb(160, 160, 160)\", len(lista_ano) + 1, colortype=\"rgb\"\n)\nfor year, color in zip(lista_ano[:-1], greys_custom):\n    x_ = df_empty.loc[df_empty.index.year == year, \"timedelta\"]\n    y_ = df_empty.loc[df_empty.index.year == year, \"cumsum\"]\n    data = go.Scatter(\n        x=x_,\n        y=y_,\n        mode=\"lines\",",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "x_",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "x_ = df_empty.loc[df_empty.index.year == lista_ano[-1], \"timedelta\"]\ny_ = df_empty.loc[df_empty.index.year == lista_ano[-1], \"cumsum\"]\ndata = go.Scatter(\n    x=x_,\n    y=y_,\n    mode=\"lines\",\n    name=ano,\n)\ngrafico_acumulado_tempo.add_trace(data)\ngrafico_acumulado_tempo.update_layout(",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "y_",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "y_ = df_empty.loc[df_empty.index.year == lista_ano[-1], \"cumsum\"]\ndata = go.Scatter(\n    x=x_,\n    y=y_,\n    mode=\"lines\",\n    name=ano,\n)\ngrafico_acumulado_tempo.add_trace(data)\ngrafico_acumulado_tempo.update_layout(\n    title=\"Acumulado Desflorestamento por Tempo\",",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "app.components.grafico_acumulacao_ano",
        "description": "app.components.grafico_acumulacao_ano",
        "peekOfCode": "data = go.Scatter(\n    x=x_,\n    y=y_,\n    mode=\"lines\",\n    name=ano,\n)\ngrafico_acumulado_tempo.add_trace(data)\ngrafico_acumulado_tempo.update_layout(\n    title=\"Acumulado Desflorestamento por Tempo\",\n    xaxis={\"title\": \"Data\", \"type\": \"date\"},",
        "detail": "app.components.grafico_acumulacao_ano",
        "documentation": {}
    },
    {
        "label": "fig",
        "kind": 5,
        "importPath": "app.components.graph",
        "description": "app.components.graph",
        "peekOfCode": "fig = go.Figure(\n    data=[go.Bar(x=[1, 2, 3], y=[1, 3, 2])],\n    layout=go.Layout(\n        title=go.layout.Title(text=\"A Figure Specified By A Graph Object\")\n    )\n)\ngraphs = dbc.Row([\n    dcc.Graph(id=\"graph\", figure=fig,\n            style={\"overflow-y\": \"scroll\", \"height\": \"93vh\"})\n])",
        "detail": "app.components.graph",
        "documentation": {}
    },
    {
        "label": "graphs",
        "kind": 5,
        "importPath": "app.components.graph",
        "description": "app.components.graph",
        "peekOfCode": "graphs = dbc.Row([\n    dcc.Graph(id=\"graph\", figure=fig,\n            style={\"overflow-y\": \"scroll\", \"height\": \"93vh\"})\n])",
        "detail": "app.components.graph",
        "documentation": {}
    },
    {
        "label": "header",
        "kind": 5,
        "importPath": "app.components.header",
        "description": "app.components.header",
        "peekOfCode": "header = html.Header(\n            [html.H3(\"Monitoramento Vegetação\"),\n            html.H5(\"Harpia\")],\n            className=\"bg-primary d-flex justify-content-between align-items-center\",\n            style={\"height\": \"4vh\"},\n        )",
        "detail": "app.components.header",
        "documentation": {}
    },
    {
        "label": "map_",
        "kind": 5,
        "importPath": "app.components.map_",
        "description": "app.components.map_",
        "peekOfCode": "map_ = dl.Map([dl.TileLayer()],\n            preferCanvas=True,\n            maxBounds=[[-8.5272, -46.6294], [-18.3484, -37.3338]],\n            style={\"height\": \"93vh\"}\n        )\nmap_ = dbc.Row([\n    map_\n])",
        "detail": "app.components.map_",
        "documentation": {}
    },
    {
        "label": "map_",
        "kind": 5,
        "importPath": "app.components.map_",
        "description": "app.components.map_",
        "peekOfCode": "map_ = dbc.Row([\n    map_\n])",
        "detail": "app.components.map_",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.config_db.configs.base",
        "description": "app.config_db.configs.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "app.config_db.configs.base",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "kind": 6,
        "importPath": "app.config_db.configs.connection",
        "description": "app.config_db.configs.connection",
        "peekOfCode": "class DBConnectionHandler:\n    def __init__(self) -> None:\n        self.__connection_string = f'postgresql+psycopg2://{config[\"DB_USER\"]}:{config[\"DB_PASSWORD\"]}@{config[\"DB_IP\"]}:{config[\"DB_PORT\"]}/{config[\"DB_NAME\"]}'\n        self.__engine = self.__create_database_engine()\n        self.session = None\n    def __create_database_engine(self):\n        engine = create_engine(self.__connection_string)\n        return engine\n    def get_engine(self):\n        return self.__engine",
        "detail": "app.config_db.configs.connection",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": "app.config_db.configs.connection",
        "description": "app.config_db.configs.connection",
        "peekOfCode": "config = dotenv_values(\".env\")\nclass DBConnectionHandler:\n    def __init__(self) -> None:\n        self.__connection_string = f'postgresql+psycopg2://{config[\"DB_USER\"]}:{config[\"DB_PASSWORD\"]}@{config[\"DB_IP\"]}:{config[\"DB_PORT\"]}/{config[\"DB_NAME\"]}'\n        self.__engine = self.__create_database_engine()\n        self.session = None\n    def __create_database_engine(self):\n        engine = create_engine(self.__connection_string)\n        return engine\n    def get_engine(self):",
        "detail": "app.config_db.configs.connection",
        "documentation": {}
    },
    {
        "label": "DecrementoMunicipio",
        "kind": 6,
        "importPath": "app.config_db.entities.decremento_municipio",
        "description": "app.config_db.entities.decremento_municipio",
        "peekOfCode": "class DecrementoMunicipio(Base):\n    __tablename__ = \"vw_decremento_municipio\"\n    id = Column(Integer, primary_key=True)\n    nome = Column(String)\n    view_date = Column(DateTime)\n    area_ha = Column(DECIMAL(10, 2))\n    def __repr__(self):\n        return f\"Decremento Municipal [titulo={self.class_name}, view_date={self.view_date}, area_ha={self.area_ha}]\"",
        "detail": "app.config_db.entities.decremento_municipio",
        "documentation": {}
    },
    {
        "label": "MonitoramentoDissolve",
        "kind": 6,
        "importPath": "app.config_db.entities.monitoramento_dissolve",
        "description": "app.config_db.entities.monitoramento_dissolve",
        "peekOfCode": "class MonitoramentoDissolve(Base):\n    __tablename__ = \"monitoramento_dissolve\"\n    id = Column(Integer, primary_key=True)\n    class_name = Column(String)\n    view_date = Column(DateTime)\n    area_ha = Column(DECIMAL(10, 2))\n    geom = Column(Geometry('POLYGON'))\n    def __repr__(self):\n        return f\"Monitoramento [titulo={self.class_name}, view_date={self.view_date}, geom={self.geom}]\"",
        "detail": "app.config_db.entities.monitoramento_dissolve",
        "documentation": {}
    },
    {
        "label": "DecrementoMunicipioRepository",
        "kind": 6,
        "importPath": "app.config_db.repository.decremento_municipio_repository",
        "description": "app.config_db.repository.decremento_municipio_repository",
        "peekOfCode": "class DecrementoMunicipioRepository:\n    def select_all(self):\n        with DBConnectionHandler() as db:\n            try:\n                data = db.session.query(DecrementoMunicipio).all()\n                return data\n            except Exception as exception:\n                db.session.rollback()\n                raise exception\n    def df_select_all(self):",
        "detail": "app.config_db.repository.decremento_municipio_repository",
        "documentation": {}
    },
    {
        "label": "MonitoramentoDissolveRepository",
        "kind": 6,
        "importPath": "app.config_db.repository.monitoramento_dissolve_repository",
        "description": "app.config_db.repository.monitoramento_dissolve_repository",
        "peekOfCode": "class MonitoramentoDissolveRepository:\n    def select_all(self):\n        with DBConnectionHandler() as db:\n            try:\n                data = db.session.query(func.ST_AsGeoJSON(MonitoramentoDissolve)).all()\n                return data\n            except Exception as exception:\n                db.session.rollback()\n                raise exception\n    def gdf_select_all(self, epsg=4674):",
        "detail": "app.config_db.repository.monitoramento_dissolve_repository",
        "documentation": {}
    },
    {
        "label": "monitoramentodissolverepo",
        "kind": 5,
        "importPath": "app.dataset.data",
        "description": "app.dataset.data",
        "peekOfCode": "monitoramentodissolverepo = MonitoramentoDissolveRepository()\n# Solicitando os dados do monitoramento_dissolve como geopandas\ngdf_monitramento_dissolve = monitoramentodissolverepo.gdf_select_all()\n# Decremento Município\ndf_decremento_municipio = DecrementoMunicipioRepository().df_select_all()\ndf_decremento_municipio['nome'] = df_decremento_municipio['nome'].astype('string')\n# Calculando os valores de área decrementada por dia\n# df_monitoramento_por_dia = df_decremento_municipio.loc[:,['area_ha']] \\\n#     .groupby(by='view_date').sum()",
        "detail": "app.dataset.data",
        "documentation": {}
    },
    {
        "label": "gdf_monitramento_dissolve",
        "kind": 5,
        "importPath": "app.dataset.data",
        "description": "app.dataset.data",
        "peekOfCode": "gdf_monitramento_dissolve = monitoramentodissolverepo.gdf_select_all()\n# Decremento Município\ndf_decremento_municipio = DecrementoMunicipioRepository().df_select_all()\ndf_decremento_municipio['nome'] = df_decremento_municipio['nome'].astype('string')\n# Calculando os valores de área decrementada por dia\n# df_monitoramento_por_dia = df_decremento_municipio.loc[:,['area_ha']] \\\n#     .groupby(by='view_date').sum()",
        "detail": "app.dataset.data",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio",
        "kind": 5,
        "importPath": "app.dataset.data",
        "description": "app.dataset.data",
        "peekOfCode": "df_decremento_municipio = DecrementoMunicipioRepository().df_select_all()\ndf_decremento_municipio['nome'] = df_decremento_municipio['nome'].astype('string')\n# Calculando os valores de área decrementada por dia\n# df_monitoramento_por_dia = df_decremento_municipio.loc[:,['area_ha']] \\\n#     .groupby(by='view_date').sum()",
        "detail": "app.dataset.data",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio['nome']",
        "kind": 5,
        "importPath": "app.dataset.data",
        "description": "app.dataset.data",
        "peekOfCode": "df_decremento_municipio['nome'] = df_decremento_municipio['nome'].astype('string')\n# Calculando os valores de área decrementada por dia\n# df_monitoramento_por_dia = df_decremento_municipio.loc[:,['area_ha']] \\\n#     .groupby(by='view_date').sum()",
        "detail": "app.dataset.data",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "df_decremento_municipio = pd.read_csv(\n    \"app/graficos_dev/data/decremento_municipio_202305291512.csv\", index_col=\"view_date\"\n)\n# dcc.Graph(\n#         id=\"grafico-acumulado-tempo\",\n#         figure=grafico_acumulado_tempo,\n#         config={\"displaylogo\": False, \"scrollZoom\": True},\n#                     )\ndf_decremento_municipio.index = pd.to_datetime(df_decremento_municipio.index)\ndf_decremento_municipio = (",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio.index",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "df_decremento_municipio.index = pd.to_datetime(df_decremento_municipio.index)\ndf_decremento_municipio = (\n    df_decremento_municipio[[\"area_ha\"]].groupby(df_decremento_municipio.index).sum()\n)\nlista_ano = df_decremento_municipio.index.year.unique()[\n    df_decremento_municipio.index.year.unique() > 2017\n]\ndf_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "df_decremento_municipio",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "df_decremento_municipio = (\n    df_decremento_municipio[[\"area_ha\"]].groupby(df_decremento_municipio.index).sum()\n)\nlista_ano = df_decremento_municipio.index.year.unique()[\n    df_decremento_municipio.index.year.unique() > 2017\n]\ndf_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]\n    df[\"timedelta\"] = (",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "lista_ano",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "lista_ano = df_decremento_municipio.index.year.unique()[\n    df_decremento_municipio.index.year.unique() > 2017\n]\ndf_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]\n    df[\"timedelta\"] = (\n        df.index - (df.index.year.astype(\"str\") + \"-01-01\").astype(\"datetime64[ns]\")\n    ) / 1000000\n    df[\"cumsum\"] = df.loc[:, \"area_ha\"].cumsum()",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "df_empty",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "df_empty = pd.DataFrame()\nfor ano in lista_ano:\n    df = df_decremento_municipio.loc[df_decremento_municipio.index.year == ano]\n    df[\"timedelta\"] = (\n        df.index - (df.index.year.astype(\"str\") + \"-01-01\").astype(\"datetime64[ns]\")\n    ) / 1000000\n    df[\"cumsum\"] = df.loc[:, \"area_ha\"].cumsum()\n    df_empty = pd.concat([df_empty, df[[\"timedelta\", \"cumsum\"]]])\n# Construindo os graficos dos anos passados da série histórica\ngrafico_acumulado_tempo = go.Figure()",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "grafico_acumulado_tempo",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "grafico_acumulado_tempo = go.Figure()\ngreys_custom = n_colors(\n    \"rgb(220, 220, 220)\", \"rgb(160, 160, 160)\", len(lista_ano) + 1, colortype=\"rgb\"\n)\nfor year, color in zip(lista_ano[:-1], greys_custom):\n    x_ = df_empty.loc[df_empty.index.year == year, \"timedelta\"]\n    y_ = df_empty.loc[df_empty.index.year == year, \"cumsum\"]\n    data = go.Scatter(\n        x=x_,\n        y=y_,",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "greys_custom",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "greys_custom = n_colors(\n    \"rgb(220, 220, 220)\", \"rgb(160, 160, 160)\", len(lista_ano) + 1, colortype=\"rgb\"\n)\nfor year, color in zip(lista_ano[:-1], greys_custom):\n    x_ = df_empty.loc[df_empty.index.year == year, \"timedelta\"]\n    y_ = df_empty.loc[df_empty.index.year == year, \"cumsum\"]\n    data = go.Scatter(\n        x=x_,\n        y=y_,\n        mode=\"lines\",",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "x_",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "x_ = df_empty.loc[df_empty.index.year == lista_ano[-1], \"timedelta\"]\ny_ = df_empty.loc[df_empty.index.year == lista_ano[-1], \"cumsum\"]\ndata = go.Scatter(\n    x=x_,\n    y=y_,\n    mode=\"lines\",\n    name=ano,\n)\ngrafico_acumulado_tempo.add_trace(data)\nfirst_day = timedelta(days=1)/1000000",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "y_",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "y_ = df_empty.loc[df_empty.index.year == lista_ano[-1], \"cumsum\"]\ndata = go.Scatter(\n    x=x_,\n    y=y_,\n    mode=\"lines\",\n    name=ano,\n)\ngrafico_acumulado_tempo.add_trace(data)\nfirst_day = timedelta(days=1)/1000000\nlast_day = timedelta(days=366)/1000000",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "data",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "data = go.Scatter(\n    x=x_,\n    y=y_,\n    mode=\"lines\",\n    name=ano,\n)\ngrafico_acumulado_tempo.add_trace(data)\nfirst_day = timedelta(days=1)/1000000\nlast_day = timedelta(days=366)/1000000\ngrafico_acumulado_tempo.update_layout(",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "first_day",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "first_day = timedelta(days=1)/1000000\nlast_day = timedelta(days=366)/1000000\ngrafico_acumulado_tempo.update_layout(\n    title=\"Acumulado Desflorestamento por Tempo\",\n    xaxis={\"title\": \"Data\", \"type\": \"date\"},\n    yaxis={\"title\": \"Área (ha)\"},\n    xaxis_tickformat=\"%d-%m\",\n    modebar={\n        \"remove\": [\n            \"zoom\",",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "last_day",
        "kind": 5,
        "importPath": "app.graficos_dev.grafico_acumulado_ano_dev",
        "description": "app.graficos_dev.grafico_acumulado_ano_dev",
        "peekOfCode": "last_day = timedelta(days=366)/1000000\ngrafico_acumulado_tempo.update_layout(\n    title=\"Acumulado Desflorestamento por Tempo\",\n    xaxis={\"title\": \"Data\", \"type\": \"date\"},\n    yaxis={\"title\": \"Área (ha)\"},\n    xaxis_tickformat=\"%d-%m\",\n    modebar={\n        \"remove\": [\n            \"zoom\",\n            \"pan\",",
        "detail": "app.graficos_dev.grafico_acumulado_ano_dev",
        "documentation": {}
    },
    {
        "label": "external_stylesheets",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "external_stylesheets = [dbc.themes.BOOTSTRAP]\nserver = Flask(__name__)\napp = dash.Dash(server=server, external_stylesheets=external_stylesheets)\napp.title = 'HarpiaDashboard'",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "server = Flask(__name__)\napp = dash.Dash(server=server, external_stylesheets=external_stylesheets)\napp.title = 'HarpiaDashboard'",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "app = dash.Dash(server=server, external_stylesheets=external_stylesheets)\napp.title = 'HarpiaDashboard'",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "app.title",
        "kind": 5,
        "importPath": "app.app",
        "description": "app.app",
        "peekOfCode": "app.title = 'HarpiaDashboard'",
        "detail": "app.app",
        "documentation": {}
    },
    {
        "label": "app.layout",
        "kind": 5,
        "importPath": "app.index",
        "description": "app.index",
        "peekOfCode": "app.layout = dbc.Container(\n    [\n        dbc.Row([header.header]),\n        dbc.Row(\n            [\n                dbc.Col([map_.map_],\n                        width=7\n                ),\n                dbc.Col([graph.graphs],\n                        width=5,",
        "detail": "app.index",
        "documentation": {}
    },
    {
        "label": "TestClassName",
        "kind": 6,
        "importPath": "test.test_data",
        "description": "test.test_data",
        "peekOfCode": "class TestClassName(unittest.TestCase):\n    def test_func(self):\n        ...\nif __name__ == '__name__':\n    unittest.main()",
        "detail": "test.test_data",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 5,
        "importPath": "test.test_data",
        "description": "test.test_data",
        "peekOfCode": "a = \"dados\"\nclass TestClassName(unittest.TestCase):\n    def test_func(self):\n        ...\nif __name__ == '__name__':\n    unittest.main()",
        "detail": "test.test_data",
        "documentation": {}
    }
]